[Jobs] The following rule does not apply: Don't swallow InterruptedException. Call Thread.currentThread().interrupt()

I just blogged about the rule Don't swallow InterruptedException. Call Thread.currentThread().interrupt() instead. (http://michaelscharf.blogspot.com/2006/09/dont-swallow-interruptedexception-call.html) It is based on a paper by Brian Goetz called "Dealing with InterruptedException" http://www-128.ibm.com/developerworks/java/library/j-jtp05236.html and the book "Java Concurrency in Practice" By BriaBrian Goetz, Tim Peierls, Joshua Bloch, Joseph Bowbeer, David Holmes, and Doug Lea (http://www.amazon.com/exec/obidos/ASIN/0321349601/ref=nosim/none0b69). However browsing the eclipse code (after publishing the blog entry :-/), I have the impression that InterruptedException are used differently and the above rule does not apply because I have seen only a few place where isInterrupted and interrupted is called.... Another indication is that org.eclipse.ui.examples.jobs the jobs do exactly the opposite of that recommendation: they call try { Thread.sleep(sleep); } catch (InterruptedException e) { Thread.interrupted(); } Thread.interrupted is not needed anyway because an InterruptedException resets the interrupted state anyway. But that gives me an indication that the paradigms of the jobs framework and java (1.5) are fundamentally different. I hope I am wrong and this bug will be marked invalid!