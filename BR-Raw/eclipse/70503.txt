[Commands] ctrl+c, ctrl+v, ctrl+x accelerators dont work in some scenarios

I have found that the accelerator keys mentioned dont work under some scenarios. There are various newsgroup posting's on news://news.eclipse.org/eclipse.platform.swt confirm the same for various people but not one satisfactory reply. After a lot of debugging (almost 2 whole days.. whew) through the SWT and UI code I found that the culprit (atleast in my case) was stale cache maintained in ActionHandler class. ActionHandler is an adaptor for action that adapts the action's interface to that of IHandler and the cache (a map called attributeValuesByName) is used to maintain the state of the underlying Action. This class refreshes its cached action state via the private method called getAttributeValuesByNameFromAction() which is called at the ActionHandler creation time and whenever the ActionHandler recieves a property change event on either the enabled or checked state of the action. The problem is that in case of Re-targetable actions among the usefule state of the action maintained by the ActionHandler is whether the action is handled by the ActionHandler (which it obtains by checking if the Re-targetable action has an associted handler) and this info is not updated independently although it is an independent state property. So I think ActionHandler should also recive property change events when the underlying Re-targetable Action changes/resets its handler and thus it would then be able to update its cached action state. To give an example, under the following scenario the cached action state in Action Handler would become stale. 1) A retargetable action (say paste) has state: enabled = true , handler = x; 2) Now due to some user gesture (selecting a different WorkbenchPart or a different selection in a part) the state changes to: enabled = false, handler = x; *[at this point the ActionHandler that is wrapping this action will get a property change event and updates its cached action state] 3) Now due to some other user gesture (which in my case was selecting a text widget) the state changes to: enabled = false, handler = null; *[Since there was no change in the enabled state or the checked state of the action the ActionHandler will not get a property change event and thus its cached action state is rendered stale at this point] Now the consequence of this stale state in ActionHandler is that when the WorkbenchKeyboard which is listening on Keyboard events for Text widget queries the command (tied to ctrl+v) to see if its handled it says yes when it should have said no. And so the key handling infrastructure of Eclipse thinks we are handling the key event ourselves and so it does not fall back on the OS to provide the default functionality. And thus we lose the native ctrl+v funstionality :).