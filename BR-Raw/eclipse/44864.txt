[CommandMgmt] Keybinding engine performance can be slow

Build: 3.0 M4 I'm investigating performance problems on the Mac (bug 43721) One test I did was to profile the system while I hold down "arrow down" in a java editor. Over 89% of the time was spent in filtering key bindings. First, it looks like keybinding filtering happens twice on each keypress. Once from Display.filterMessages, and again from OS.DispatchMessage. I don't understand why this happens, but maybe it's reasonable. Both of these result in an identical chain of events, so I'll just focus on one branch. Here is the call chain that I believe is causing the problem. The numbers in brackets are the number of invocations of each method. Note the polynomial growth: Workbench.press (380 inv) CommandManager.getMatchesByKeySequenceForMode (2280 inv) KeyBindingMachine.getMatchesByKeySequenceForMode (2280 inv) KeyBindingNode.getMatchesByKeySequence (2280 inv) ArrayList<init> (220202 inv) KeySequence.getInstance (220020 inv) (this method copies the ArrayList created above) KeyBindingNode.getMatchesByKeySequence (recursion - 220020 inv) (this method creates a HashMap) I will attach profiler results so you can see more details. There has to be a more efficient data structure for resolving key bindings without this polynomial effect. Since this filtering happens twice, 380 key presses is resulting in over a million List instances and half a million HashMaps. Each HashMap contains two Object[] objects, and each ArrayList contains one Object[] object... here is the breakdown of object creations from this example (again about 380 key presses): Object[] 2,098,915 (103,909 K) ArrayList 1,045,605 (40,789 K) List$Itr (iterator) 800,788 (31,280 K) Collections$1 (iterator) 532,182 (16,630 K) Collections$UnmodifiableRandomAccessList 520,261 (16,243 K) KeySequence 515,630 (20,123 K) HashMap 517,957 (28,172 K) .... Grand total: about 293 MB of garbage objects (yes, Megabytes)