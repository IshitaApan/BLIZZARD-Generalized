[Undo] - After successful undo, should operation be disposed by framework if it cannot be redone?

In verifying bug #93192 for M7, I found this slight hole in the dispose strategy. It's not clear what should be done here. This is what happens after a successful undo: 	// Only add the operation to the redo stack if it can indeed be 	// redone. This conservatism is added to support the integration 	// of existing frameworks (such as Refactoring) that produce 	// undo and redo behavior on the fly and cannot guarantee that 	// a successful undo means a successful redo will be available. 	// We check this outside of the synchronized block. 	// See bug #84444 	boolean addToRedoStack = operation.canRedo(); 	synchronized (undoRedoHistoryKey) { 		undoList.remove(operation); 		if (addToRedoStack && checkRedoLimit(operation)) { 			redoList.add(operation); 		} 	}