[Dialogs] org.eclipse.jface.dialogs.Dialog.shortenText calls GC.textExtent too often

Created attachment 80967 Proposed patch Build ID: M20070212-1330 I am a performance analyst of an adopter product. We are currently working on our first release on an Eclipse 3.2.2 base (previously we were on an Eclipse 3.0 base). One of the performance regressions that we have seen has to do with updating the progress monitor during a build. The messages (including their frequency) that are being sent to the progress monitor has not changed, however the overall cost of writing them to the monitor has dramatically increased. A profile directs us to the method Dialog.shortenText, which is new since Eclipse 3.0 (not sure when it was introduced). It improves the information presented to the screen by taking characters out of the middle of the message instead of just letting the message run over the side of the monitor control. However, the way that this method removes those characters from the middle of the message is rather brute force--a loop removing 2 characters and checking if it now fits. The expensive call here is GC.textExtent, so we want to avoid as many of these as possible. I have come up with a patch (on R3_2_maintenance branch) that immediately will get rid of most of the required characters, and then remove them slowly until it fits. In my long-running case, the actual message put to the screen was identical using either the original implementation or my patch (checked programmatically). This patch removes 87% of the processing time spent in this method for my test. For this long-running test, that translates to a time savings of almost 200 seconds, or about 24% of my whole test! Yes, we are writing a lot of long messages to the monitor. In my patch, a 0.95 constant can be seen. Using that fixed an occasional over-shoot where my fix resulted in 2 too many characters being removed, although it was slightly faster than this version. If there is any way to get an official patch on Eclipse 3.2.2 that we can consume, that would be great. More important is to get this in to the active branches.