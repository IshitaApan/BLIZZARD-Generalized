Should/can IProgressConstants be marked @noimplement

While committing bug 302529, which added a new constant, IProgressConstant.SHOW_IN_TASKBAR_ICON_PROPERTY, I had an error in my workspace indicating that there was an unnecessary problem filter for IProgressConstants.COMMAND_PROPERTY. I rather naively removed the problem filter. Then Eric synched up to tag for the build and said, "why do I have compile errors for IProgressConstants.COMMAND_PROPERTY and IProgressConstants.SHOW_IN_TASKBAR_ICON_PROPERTY" I thought...hmmm...my API baseline and rules settings for platform UI must not be as strict as Eric's. The solution is to add the problem filter. So Eric did, and now everything "seems" just fine. Except that the API error is really trying to point out a real problem! org.eclipse.ui.progress.IProgressConstants.COMMAND_PROPERTY in an interface that is intended to be implemented or extended has been added org.eclipse.ui.progress.IProgressConstants.SHOW_IN_TASKBAR_ICON_PROPERTY in an interface that is intended to be implemented or extended has been added We shouldn't be using API filters here because we have truly introduced breaking changes. IProgressConstants is not marked @noimplement. However we have broken clients before. The javadoc says: * The four constants define property keys that are used to associate * UI related information with Jobs (<code>org.eclipse.core.runtime.jobs.Job</code>). However there are 8 constants. One was added during 3.1 NO_IMMEDIATE_ERROR_PROMPT_PROPERTY The two in this bug have been added in 3.6 Not sure if another has been added or if the original javadoc was just wrong. So we've broken the rule before. What do we do now? - mark it @noimplement after the fact? (breaking change) - allow the breaking change because we've done it before? - split off IProgressConstants2 for the 3.6 additions?