[RCP] Requesting programmatic hook to create view folders that remain visible after their last child is closed

Build ID: M20071023-1652 Steps To Reproduce: 1. In my perspective factory, I create a view folder using the IPageLayout.createFolder method. 2. I add a view to the folder that I created in step 1, either programmatically or through the UI. 3. I close the view that I added to the folder, either programmatically or through the UI. 4. The folder disappears. At the developer's option, it should be possible to create a view folder that can survive the loss of its children! Here is a test case and some helper classes that I created. It is assumed that the StandardFolder perspective factory is registered as an extension via the plugin.xml file. CreateFolderTest.java --------------------------------------------------------- package org.eclipse.ui.tests.rcp; import junit.framework.TestCase; import org.eclipse.swt.widgets.Display; import org.eclipse.ui.IViewPart; import org.eclipse.ui.IWorkbenchPage; import org.eclipse.ui.IWorkbenchWindow; import org.eclipse.ui.PartInitException; import org.eclipse.ui.PlatformUI; import org.eclipse.ui.application.IWorkbenchWindowConfigurer; import org.eclipse.ui.application.WorkbenchAdvisor; import org.eclipse.ui.internal.PartPane; import org.eclipse.ui.internal.ViewSite; import org.eclipse.ui.internal.ViewStack; import org.eclipse.ui.tests.rcp.util.EmptyView; import org.eclipse.ui.tests.rcp.util.StandardFolderPerspective; import org.eclipse.ui.tests.rcp.util.WorkbenchAdvisorObserver; /** * Tests the behaviour of various IPageLayout.createFolder methods */ public class CreateFolderTest extends TestCase { public CreateFolderTest(String name) { super(name); } private Display display = null; protected void setUp() throws Exception { super.setUp(); assertNull(display); display = PlatformUI.createDisplay(); assertNotNull(display); } protected void tearDown() throws Exception { assertNotNull(display); if (!display.isDisposed()) { display.dispose(); } assertTrue(display.isDisposed()); super.tearDown(); } /** * Regression test standard folder creation in which the folder disappears after its last child is closed */ public void testCreateStandardFolder() { WorkbenchAdvisor wa = new WorkbenchAdvisorObserver(1) { public void preWindowOpen(IWorkbenchWindowConfigurer configurer) { super.preWindowOpen(configurer); configurer.setShowPerspectiveBar(false); } public void postStartup() { try { IWorkbenchWindow window = getWorkbenchConfigurer() .getWorkbench().getActiveWorkbenchWindow(); IWorkbenchPage page = window.getActivePage(); IViewPart view = page.showView(EmptyView.ID); PartPane pane = ((ViewSite) view.getSite()).getPane(); ViewStack parent = ((ViewStack) (pane.getContainer())); assertTrue(parent.getVisible()); page.hideView(view); assertTrue(parent.getVisible()); } catch (PartInitException e) { fail(e.toString()); } } public String getInitialWindowPerspectiveId() { 	return StandardFolderPerspective.PERSP_ID; } }; int code = PlatformUI.createAndRunWorkbench(display, wa); assertEquals(PlatformUI.RETURN_OK, code); } } StandardFolderPerspective.java ----------------------------------------------------------- package org.eclipse.ui.tests.rcp.util; import org.eclipse.ui.IFolderLayout; import org.eclipse.ui.IPageLayout; import org.eclipse.ui.IPerspectiveFactory; /** * This perspective is used for testing the createFolder api. It defines an initial * layout with an empty view folder. */ public class StandardFolderPerspective implements IPerspectiveFactory { /** * The perspective id for the empty perspective. */ public static final String PERSP_ID = "org.eclipse.ui.tests.rcp.util.StandardFolderPerspective"; //$NON-NLS-1$ /** * Constructs a new Default layout engine. */ public StandardFolderPerspective() { super(); } /** * Defines the initial layout for a perspective. * * Implementors of this method may add additional views to a * perspective. The perspective already contains an editor folder * with <code>ID = ILayoutFactory.ID_EDITORS</code>. Add additional views * to the perspective in reference to the editor folder. * * This method is only called when a new perspective is created. If * an old perspective is restored from a persistence file then * this method is not called. * * @param factory the factory used to add views to the perspective */ public void createInitialLayout(IPageLayout layout) { IFolderLayout folder = layout.createFolder("folder", IPageLayout.LEFT, 1.0f, layout.getEditorArea()); folder.addPlaceholder(EmptyView.ID); } } EmptyView.java ------------------------------------------------------------ /******************************************************************************* * Copyright (c) 2004, 2006 IBM Corporation and others. * All rights reserved. This program and the accompanying materials * are made available under the terms of the Eclipse Public License v1.0 * which accompanies this distribution, and is available at * http://www.eclipse.org/legal/epl-v10.html * * Contributors: * IBM Corporation - initial API and implementation *******************************************************************************/ package org.eclipse.ui.tests.rcp.util; import org.eclipse.swt.SWT; import org.eclipse.swt.widgets.Composite; import org.eclipse.swt.widgets.Label; import org.eclipse.ui.part.ViewPart; /** * Minimal view, for the RCP tests. */ public class EmptyView extends ViewPart { public static final String ID = "org.eclipse.ui.tests.rcp.util.EmptyView"; //$NON-NLS-1$ private Label label; 	public EmptyView() { 	 // do nothing 	} 	public void createPartControl(Composite parent) { 	 label = new Label(parent, SWT.NONE); 	 label.setText("Empty view"); 	} 	public void setFocus() { 		label.setFocus(); 	} } More information: I would be happy to assist in any way that I can with the creation of a patch for this enhancement request. Indeed, I have already created such a patch which I will submit, though I am not experienced enough with the Eclipse platform to ascertain whether my patch factors in all possible permutations. The main snag that I encountered had to do with the minimization of empty view folders. I have dealt with this and added test cases for it.