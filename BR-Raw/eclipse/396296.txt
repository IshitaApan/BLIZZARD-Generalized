[JFace] jface ToolTip isn't disposed when underlying control is disposed leading to errors.

If a custom tooltip is showing when a table is disposed then the tooltip hangs around. This can lead to lots of errors. Its easy to reproduce this in 3.7.2. I took this snippet http://wiki.eclipse.org/index.php/JFaceSnippets#Snippet011CustomTooltips and added the following to trigger the dispose on a key press:- v.getTable().addKeyListener(new KeyListener() { @Override public void keyReleased(final KeyEvent e) { // Press escape to dispose the table and the tooltip hangs around which will lead to errors. v.getTable().dispose(); } @Override public void keyPressed(final KeyEvent e) { } }); To see the problem you need to hover over something in the table then hit 'Escape' or something to trigger the disposal of the table. The tooltip will remain. On linux if you subsequently hover over the tooltip you get an exception and the test application bails. Similar mayhem occurs in my RCP app except the exception handler catches the error and you keep getting more and more errors. I think this is cause because there are two listeners interfering with one another. The org.eclipse.jface.window.ToolTip adds an anonymous dispose listener when its constructed. It also adds the ToolTipOwnerControlListener which should hide the tooltip when the underlying control is disposed. However, the first listener is first in the event table and it removes the second listener so the 'hide' code is never invoked in this case. I think a simple fix would be to combine the two listeners into one so that on SWT.Dispose the ToolTipOwnerControlListener can additionally do the steps in the other anonymous listener. As a work-around I've added another dispose listener to the control which calls ToolTip.hide().