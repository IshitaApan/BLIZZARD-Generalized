[Workbench] use of BundleListener in AbstractUIPlugin

While investigating some improvements to the lazy-start features in Equinox I ran across some code in AbstractUIPlugin.start that adds a BundleListener that listens for the bundle to finish activating and then calls the refreshPluginActions() method. My question is should this be a SynchronousBundleListener? Since you use a "normal" BundleListener it is pretty much gauranteed that the refreshPluginActions() method will be called from a separate event dispatcher thread than the thread which caused the bundle to be activated. Is this really desired? It seems like you would really want this to be called from the same thread immediately after the bundle has been activated using the same thread that activated the bundle. Currently this does not cause any "known" issues. But it did cause me some headaches when I was investigating some improvements to our lazy-activation. I was looking into solving the long standing ClassCirclarityError bug that we have had in Eclipse for a very long time (see bug 5875). The details here are not that important. My main question is do you *really* require the refreshPluginActions to be called on a separate thread than the activating thread which caused Bundle.start to be called? To me it seems like you should be doing this call from the same thread as the activating thread. In this case you should be using a SynchronousBundleListener.