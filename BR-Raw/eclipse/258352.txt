[Progress] synchronization in ProgressManager too expensive

Created attachment 120102 proposed patch Build ID: 3.4.1.M20080827-0800a I am a performance analyst for an adopting product. During analysis of our forthcoming release (based on Eclipse 3.4.1), we observed a lot of stress on the 'listenersKey' lock in the class org.eclipse.ui.internal.progress.ProgressManager for builds of a medium-sized workload. It turns out that this synchronization is rarely actually needed since the array it protects rarely changes. We can remove all the steady-state synchronization costs if we only synchronize when the array is altered (addListener/removeListener), use temporary arrays and then "flip the switch" when altering the array, and use temporary array references when iterating through the array unprotected. Since a new array is built for any change, unprotected iterations are safe as long as local references to the array are used. I have attached a patch that accomplishes this. A catch, though, when I made this change was that the listener ProgressViewUpdater seemed to be called much more frequently and ending up scheduling its 'updateJob' 115k times during import and build of the same medium-sized workload. This puts strain on the JobManager locks (see bug 258177). The patch also includes a small fix to make sure that the ProgressViewUpdater doesn't call schedule too often. With the patch, the 'updateJob' only scheduled itself about 1.4k times during import and build of the same workload.