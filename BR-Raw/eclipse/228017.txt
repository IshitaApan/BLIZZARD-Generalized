StyledCellLabelProvider wastes CPU in TableItem#getBounds(..) even if owner draw disabled

HEAD StyledCellLabelProvider uses a lot of CPU in TableItem#getBounds(..) for each call to update(ViewerCell), even if owner draw is disabled. At least when owner draw is disabled, the manual refresh is unnecessary. To see one instance of the performance problem, disable colored labels, run the JUnit test attached to bug 196140 comment 2, switch to Show Tests in Hierarchy, and then toggle Show Failures Only. This took about 2s in 3.3.2, but more than 20s in HEAD. Adding 		if (isOwnerDrawEnabled()) in StyledCellLabelProvider.update(ViewerCell) solved the problem for me, but I'm not sure whether that's the right fix. Maybe it should be done in OwnerDrawLabelProvider, because that class already allows to toggle owner traw with setOwnerDrawEnabled(..). I'm investigating whether the JUnit view could do anything to improve the situation when colored labels are enabled. I think the brute-force redrawing of every updated cell could also be improved.