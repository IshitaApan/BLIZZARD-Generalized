[refactoring] Convert anonymous: generates fields for constants

In 3.1. Consider code: public class Foo {	 	private static final int SEVEN = 7; 	private static final int FIVE = 5; 	public static void main(String[] args) {		 		Runnable runnable = new Runnable() { 			public void run() { 				System.out.println("The answer is " + (FIVE * SEVEN)); 			}		 		}; 		runnable.run(); 	} } Select the anonymous Runnable, and execute Convert Anonymous Class to Nested. The result: public class Foo {	 	private static class Twelve implements Runnable { 		private final int fFive; 		private final int fSeven; 		private Twelve(int five, int seven) { 			super(); 			fFive = five; 			fSeven = seven; 		} 		public void run() { 			System.out.println("The answer is " + (fFive * fSeven)); 		} 	} 	private static final int SEVEN = 7; 	private static final int FIVE = 5; 	public static void main(String[] args) {		 		Runnable runnable = new Twelve(FIVE, SEVEN); 		runnable.run(); 	} } I never want this behavior--I want the constants to be used as constants.