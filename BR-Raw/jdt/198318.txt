[ltk] getActive() is incorrect for InternalTextEditChangeNode

Created attachment 74968 patch When a CompositeChange has several TextFileChanges as its children and they are rendered in the ChangeElementTreeViewer, unchecking one of the children will fully uncheck the parent composite node instead of setting it to PARTLY_ACTIVE. This is because the getActive() method for InternalTextEditChangeNode relies on AbstractCompositeChange.getCompositeChangeActive() which will always return ACTIVE when the node has no children. Using this method does not make logical sense anyway since the node does not represent a CompositeChange. This bug manifests itself in the new preview added to the Organize Manifests wizard in bug 173793. To reproduce: - Run the latest code on head. - Open the manifest editor for a project with at least one externalized property and switch to the source page. - Remove all references to an externalized property (e.g. the name). - Add a non-existent package to "Export-Package:". - Save the changes, right click the project in the package explorer and select "PDE Tools > Organize Manifests..." - Select the options "Remove unresolved packages" and "Remove unused keys from the plug-in's properties file" and click the preview button. This will give you a preview of one CompositeChange with two TextFileChange children. You can see that unchecking one unchecks the parent instead of setting it to PARTLY_ACTIVE. Attached is a proposed patch which returns ACTIVE if the underlying change is enabled and INACTIVE otherwise.