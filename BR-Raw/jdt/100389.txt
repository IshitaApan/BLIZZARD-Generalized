Infer Type Arguments removes too many casts and causes name clashes

N20050616-0010 This bug is for fixing the two main issues from bug 99574. The 'Infer Generic Type Arguments' refactoring removes too many casts e.g. in conditional expressions. Casts should only be removed if the type of the casted expression has actually changed. In the example below, the refactoring causes name clashes since it infers 'new Comparator<Qualified>() {...}', but does not change the method compare(Object o1, Object o2) to compare(Qualified o1, Qualified o2). The workaround for 3.1 is to leave the whole anonymous type raw in this case. import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; class Qualified { 	String qualifier; 	String name; } class Comparisons { 	ArrayList fList= new ArrayList(); 	 	void add(Qualified q) { 		fList.add(q); 	} 	 	void sort() { 		Collections.sort(fList, new Comparator() { 			public int compare(Object o1, Object o2) { 				Qualified q1= (Qualified) o1; 				Qualified q2= (Qualified) o2; 				int qualifierComp = q1.qualifier.compareTo(q2.qualifier); 				if (qualifierComp != 0) 					return qualifierComp; 				else 					return q1.name.compareTo(q2.name); 			} 		}); 	} }