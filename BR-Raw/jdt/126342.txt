[key binding] Suggestions for AbstractInformationControl

In the course of looking at Bug 126044, Paul and I have been looking at what exactly AbstractInformationControl is doing. I'm opening this bug so that we can talk about changes we would like to suggest. I'd like to use this bug for a bit of a discussion, so please don't make any changes quite yet. :) There are three groups of bindings: A = { Ctrl+F10 -> show ruler context menu }; B = { Ctrl+O -> quick outline, Ctrl+T -> quick type hierarchy }; C = { Ctrl+F10 -> show view menu }. As it stands right now, A and B are placed in the same context (i.e., Editing Java). This is what is causing some problems. At one point, !A&B&C need to be active, and at another point, A&B need to be active. I think either A or B should be broken out of the Editing Java context. Quick Outline supports pressing Ctrl+O again to show inherited members. I think that behaviour is broken right now, and is only working because of a bug we introduced in I20060131-1200. When the Quick Outline is open, Editing Java should be inactive, which means B should be inactive. This means that asking for the best binding for the 'org.eclipse.jdt.ui.edit.text.java.show.outline' command will return nothing. Also, there is the problem that the KeyAdapter circumnavigates the command framework, which can cause problems in some corner cases. In my mind, it would be better if the Quick Outline simply registered a handler for the 'org.eclipse.jdt.ui.edit.text.java.show.outline' command. That handle would toggle the showing of inherited memebers. My thinking here is to do one of two things: (1) Move B to its own context. This context would be a child of "In Dialogs and Windows". Both the Java editor and the AbstractInformationControl would activate this context. (2) Move A to its own context. This context would be a child of "Editing Text". The Java editor would activate this context, but deactivate it before opening the AbstractInformationControl.