[implementation] Performance issue with jface text WordRule

Created attachment 136631 WordRule performance patch The WordRule class is used by various text editors for partitioning and colouring. It is also used by some incremental builders for parsing the files. I've found a major performance problem when using the class in case-insensitive mode. The problem arises from this block of code: if (token == null && fIgnoreCase) { 	Iterator iter= fWords.keySet().iterator(); 	while (iter.hasNext()) { 		String key= (String)iter.next(); 		if(buffer.equalsIgnoreCase(key)) { 			token= (IToken)fWords.get(key); 			break; 		} 	} } So for every word in the rule .equalsIgnoreCase() is called, which will convert the key chars to lowercase before comparing. As you can imagine, this is a very slow piece of code when you have a lot of words to iterate over, and does not scale well compared to a map. In the attached patch, I convert any added words to lower case as they are initially added, and then convert the buffer to lower case (just once). This means that we can remove the above code altogether, in favour of using a lookup on the hashmap as is done for normal case-sensitive words. I have also taken the opportunity to replace StringBuffer with the more efficient StringBuilder. In my testing, this simple change increased the performance of my document parsing by a factor of 30!! That time includes reading the file, converting to a document, applying the rules and then printing out to the console on a sample of 300 source files. I admit that my case may be unusual as I have a couple of hundred case-insensitive words, but I definitely think this is a patch worth applying pre-3.5 release, as it does not affect the API anyway and the performance gain is so enormous.