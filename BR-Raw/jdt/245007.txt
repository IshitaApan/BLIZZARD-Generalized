[compiler] Should not completely ignore anonymous type with missing super type

Created attachment 110722 proposed patch Consider the following class: public class ClassWithAnon { int container() { new Missing() { void bar(int i) {} }.bar(false); return new Missing2() {}; } } Currently, the compiler correctly reports: ---------- 1. ERROR in ClassWithAnon.java (at line 3) 	new Missing() { 	 ^^^^^^^ Missing cannot be resolved to a type ---------- 2. ERROR in ClassWithAnon.java (at line 7) 	return new Missing2() {}; 	 ^^^^^^^^ Missing2 cannot be resolved to a type ---------- 2 problems (2 errors) However, by only deleting(!) two source lines in QualifiedAllocationExpression it can be made to report two more errors, which, too, are interesting: ---------- 1. ERROR in ClassWithAnon.java (at line 3) 	new Missing() { 	 ^^^^^^^ Missing cannot be resolved to a type ---------- 2. ERROR in ClassWithAnon.java (at line 5) 	}.bar(false); 	 ^^^ The method bar(int) in the type new Missing(){} is not applicable for the arguments (boolean) ---------- 3. ERROR in ClassWithAnon.java (at line 7) 	return new Missing2() {}; 	 ^^^^^^^^^^^^^^^^^ Type mismatch: cannot convert from new Missing2(){} to int ---------- 4. ERROR in ClassWithAnon.java (at line 7) 	return new Missing2() {}; 	 ^^^^^^^^ Missing2 cannot be resolved to a type ---------- 4 problems (4 errors) I'll attach a proposed micro-patch. With all the recently gained resilience I see no danger in proceeding one step further. Am I missing any thing?