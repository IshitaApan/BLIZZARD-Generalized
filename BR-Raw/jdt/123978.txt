Ensure update of working set team state decorations

New support has just been released to support model element decoration (see bug 86493). Basically, for objects with a one-to-one mapping to resources, no work needs to be done. For others, the model must issue label updates atr the appropriate time. To know if a label update is required, a model can make use of an IDecorationContext and a SynchronizationStateTester. Here is a summary of what needs to be done 1) The view must create a DeocationContext (new API in JFace and set the contet of their decorating label provider to be this new context). This will allw the view to communicate state through to the team decorator. 2) The view must create an instance of SynchronizationStateTester and add it as the SynchronizationStateTester.PROP_TESTER property of the decoration context. 3) The view must listen to local changes (IResourceDelta) and remote changes (SynchronizationStateTester#getSubscriber().addListener() and determine if the changes have resulted in a change in the decorated state of the working set. 4) How does the model know if the decorated state has changed? There is a getState on the tester that is passed a stateMask. The team decorator (CVS) will call this method with a stateMask that indicates what state is being decorated. You can override this method is a subclass and record the mask and returned state and use this to determine when you need to fire a label update. You'll probably want to do the calculation is a background thread to avoid blocking the UI. 5) Bonus points if you adapt java methods to resource mappings and override the getState method to calculate and return the proper dirty state for individual methods;-)