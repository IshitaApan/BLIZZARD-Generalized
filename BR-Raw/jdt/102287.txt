[refactoring] [dcr] Implement "Introduce Parameter Object"

I often end up manually applying the refactoring Replace Method with Method Object from Martin Fowler's book (summary at http://www.refactoring.com/catalog/replaceMethodWithMethodObject.html, although my suggested usage is a little different: he creates fields for all temps in the method, whereas I generally only create fields for a subset of the method's parameters) It would be great to have this implemented automatically in Eclipse. Here's my outline. Given a method and its caller: public String foo(int x, int y, int z) { return String.format("%s, %s, %s", x, y, z); } public String bar() { return foo(1, 2, 3); } Select the method declaration, and select Refactor > Replace Method with Method Object. A dialog opens, asking the name of the new class (default to the method name capitalized), and the name of the computation method (default to "compute"). It also gives you a "create field" check box for each parameter, defaulted to checked. Let's say that we choose the default class name Foo and computation method name "compute". For x and y, we leave "create field" checked, but we uncheck it for z. Then, we click Finish. The result (accessibility left out): static class Foo { int x; int y; Foo(int x, int y) { this.x = x; this.y = y; } String compute(int z) { return String.format("%s, %s, %s", x, y, z); } } public String bar() { return new Foo(1, 2).compute(3); } One final note: this refactoring should be able to make use of a lot of the machinery from Convert Anonymous to Nested. As a matter of fact, I often take advantage of that fact when applying it manually. I'll use this intermediate step: public String foo(int x, int y, int z) { return new Object() { String compute(int z) { return String.format("%s, %s, %s", x, y, z); } }.compute(z); }