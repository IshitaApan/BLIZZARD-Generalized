Placement of exisiting comments after Add javadoc [code manipulation]

Follow up to bug 38185. ------- Additional Comment #5 From Sebastian Davids 2003-11-22 06:59 ------- The "Add Javadoc" command does not work "properly" in my opinion also: public class X { public void test() {} //todo should we add another method test(int) here? public static Object foo(int bar, Object baz) { return null; } } Will produce: public class X { public void test() {} /** * @param bar * @param baz * @return */ //todo should we add another method test(int) here? public static Object foo(int bar, Object baz) { return null; } } I would prefer if it inserts the javadoc _directly_ in front of the method declaration: public class X { public void test() {} //todo should we add another method test(int) here? /** * @param bar * @param baz * @return */ public static Object foo(int bar, Object baz) { return null; } } The comment in front of the method might not belong to the method but might rather be a comment for the class or a general "Todo". ------- Additional Comment #6 From Daniel Megert 2003-11-24 04:20 ------- The general problem is that we don't call "Add Javadoc" when /** + Enter is typed. Since this is the original PR I adapted the summary. Can you please file a separate bug for the placemnet of the single line commnent since these are two separate issues. Regarding the place of the single line comment, the "might" in your sentence is key: we can only guess whether it belongs to the method above or below. Are the following examples identical? I guess not from looking at example 2 and 3 since the programmer probably tried to assign the comment to one of the two methods using line separation. However, programmer in 4 mentions directly the method. He does not care about spacing since he will use the code formatter at a later point. 1) m1() // singleLineComment m2() 2) m1() // singleLineComment m2() 3) m1() // singleLineComment m2() 4) m1() // singleLine comment referring to m1 m2()