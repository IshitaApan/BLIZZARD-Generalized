WST code assumes IResource.getLocation() returns a non-null value

In a couple of places org.eclipse.wst.sse.core.internal.model.ModelManagerImpl.calculateURIResolver org.eclipse.wst.sse.core.internal.FileBufferModelManager.createURIResolver org.eclipse.wst.xml.core.internal.validation.core.AbstractNestedValidator.validate in the wst.sse and wst.xml code, when creating a URIResolver the code calls IResource.getLocation() but does not check the returned value for null. With the introduction of EFS in Eclipse 3.2, IResource.getLocation will return null if the resource is a link to a resource in another IFileSystem (e.g. a file on a FTP server if the org.eclipse.core.filesystem.ftp prototype plugin is in use.) The above code results in NullPointerExceptions, causing any SSE based editors (e.g. the XML or WSDL editors) to throw NullPointers when opening a linked resource. This is causing us some problems as we rely on the WTP editors handling linked resources. To reproduce: 1) Install plugins for an alternative IFileSystem implementation - see http://wiki.eclipse.org/index.php/EFS 2) Put some sample files (html & wsdl) into your filesytem backend (e.g. onto the FTP server if using the FTP plugin) 3) Create an empty simple project. 4) Edit the .project file and linkedResource entries: <linkedResources> 	 <link> 		 <name>index.html</name> 		 <type>1</type> 		 <locationURI>ftp//localhost/index.html</locationURI> 	 </link> 	 <link> 		 <name>hello.wsdl</name> 		 <type>1</type> 		 <locationURI>ftp://localhost/hello.wsdl</locationURI> 	 </link> </linkedResources> 5) Try opening the linked file int the workspace and then check the ErrorLog. Note: You make need to pick up the patch mentioned at https://bugs.eclipse.org/bugs/show_bug.cgi?id=137878 if you want to use the FTP plugin. (I'm testing using a HTTP IFileSystem impl that I am writing). See http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.platform.doc.isv/porting/3.2/incompatibilities.html for more documentation ont the change of behavior in E3.2. In some places switching to IResource.getLocationURI() might be appropriate - I'm not sure as the expected value of URIResolver#fileBaseLocation is not javadoc'ed. FileBufferModelManager.createURIResolver() probably needs rework as it seems to have a special case for resources in the workspace (which might now be links to external resources).