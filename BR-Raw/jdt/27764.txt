IResource.findMarkers is called too often

Build I20021204. I am investigating bug 11164, which states that when starting Eclipse in the java perspective, roughly 40% of the time is in IResource.findMarkers. I have improved the performance of this method by 4x, but the slowness is largely due to the number of times findMarkers is called. Here are some JDT-specific scenarios along with the number of times findMarkers is called in each case. All of these scenarios use the "big workspace" that Jeff made available on the eclipse performance page. This workspace has 134 projects, 812 warning markers, and a total of 74133 resources, 7789 of which are team private (invisible to most clients). Startup in the resources perspective with one java file open (I used CoreException.java). Hit space bar in the editor, then save. findMarkers is called 1369 times, 44 of those on folders, 2 on files, and 1323 times on projects (ten times for each project). Simply switching to the java perspective after startup calls findMarkers 414 times, always on projects (roughly three times on each project). You can get rough breakdown of where the number come from by carefully starting components one at a time: 1) Open a new workbench in the resource perspective, no editors open. 2) Open a java preference page. This of course starts JavaCore and JavaUI plugins. This causes findMarkers to be called 234 times on projects, a bit less than twice for each project. I don't understand why it should be searching for markers *at all* in this case. 3) Then open a collapsed java package exlorer view. This calls findMarkers a further 178 times on projects. This is mostly reasonable because it does have to decorate each visible project in the tree. 4) After this, for each resource revealed in the package explorer, findMarkers is called once for each resource. Note that this is n^2 behaviour at best: it calls findMarkers with depth infinity on each visible resource. If findMarkers on a parent has not revealed any markers, then calling findMarkers on all children is a waste. In general, calling findMarkers in files is very cheap, but calling it on folders near the root gets more expensive. 5) Then do a no-op edit on CoreException.java and save. This calls findMarkers a further 1142 times, mostly on projects.