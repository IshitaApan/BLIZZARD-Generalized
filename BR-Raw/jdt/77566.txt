[API] Implementations of AbstractJavaLaunchConfigurationDelegate.launch are too monolithic

Hello, YourKit, LLC (http://www.yourkit.com) is developing plug-in for Eclipse to integrate "YourKit Java Profiler" with Eclipse IDE. The current version of the plug-in adds new "profile" action via "org.eclipse.debug.core.launchDelegates". Current Eclipse's API is not enough to implement such integration without using API from "internal" packages. I'd try to summarize the current problems: To launch JVM with YourKit profiler's agent we need to add some JVM parameters and also patch PATH environment variable to make agent DLL visible to JVM. To achieve this we are overriding AbstractJavaLaunchConfigurationDelegate.launch method in each subclass of AbstractJavaLaunchConfigurationDelegate. All Eclipse's implementations of AbstractJavaLaunchConfigurationDelegate.launch are too monolithic, and to make "profile" action works exactly the same way as "run" we have to copy whole body of AbstractJavaLaunchConfigurationDelegate.launch and patch small peaces that add JVM args, etc. This approach causes using of internal API. I'm suggesting to add some granularity. I see two possible ways: 1.Add "getVMArguments" and "getEnv" methods to AbstractJavaLaunchConfigurationDelegate and all subclasses just will invoke these methods to compose VM agrs and environment. 2.Add "getVMArguments" and "getEnv" to all subclasses of AbstractJavaLaunchConfigurationDelegate (and not to add the methods to base class AbstractJavaLaunchConfigurationDelegate). Actually these two options are the same. But adding these additional methods will allow not to use internal APIs that might be used inside implementations of AbstractJavaLaunchConfigurationDelegate.launch Regards, Vladimir Kondratyev