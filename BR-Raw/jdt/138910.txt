[JUnit] JUnit launch config type should support resource mapping

From bug 124409... Sorry this fell through the cracks, as I thought PDE owned the JUnit launcher. JUnit should provide a launch migration delegate to properly migrate its launch configurations to support resource based filtering in the UI. See the following entries that have been added to the 3.2 migration guide. ---------------------------------------------------------------- Launch configuration resource mapping Eclipse 3.2 provides new infrastructure for associating launch configurations with resources. This mapping allows the platform to perform resource based filtering on launch configurations and allows the platform to optionally delete launch configurations when an associated project is deleted. The launch dialog has been enhanced to support a set of filters to optionally hide configurations associated with closed and deleted projects. As well, the launch dialog supports filtering based on selected working sets in the active workbench window, which can also be selected in the launch dialog. It is a client responsibility to manage the resource mapping for launch configurations. API has been added to ILaunchConfigurationWorkingCopy to set the resources associated with a configuration, and API has been added to ILaunchConfiguration to get the resources associated with a configuration. Launch configuration migration support Eclipse 3.2 provides new infrastructure for migrating launch configurations to be compatible with new tooling. For example, in Eclipse 3.2, support has been added to perform resource based filter on launch configurations. Launch configurations need to be upgraded to provide resource mappings in to leverage this new feature. Users can manually migrate launch configurations in their workspace from the Run/Debug > Launching > Launch Configurations preference page, by pressing the Migrate button. An new optional migration delegate attribute has been added to the launchConfigurationTypes extension point, specifying a class that implements the new interface ILaunchConfigurationMigrationDelegate. A migration delegate is responsible for identifying migration candidates and migrating them. ------------------------------------------------------ You need to: * update your JUnitMainTab to setResourceMapping(...) on performApply (see JavaMainTab as example) * update your launch shortcut to setResourceMapping(...) when it creates a new config * update launch config type extension to point to our JavaMigrationDelegate. The delegate will perform migration of existing 3.1 configs to set their initial resource mapping. example: <launchConfigurationType delegate="org.eclipse.jdt.launching.JavaLaunchDelegate" id="org.eclipse.jdt.launching.localJavaApplication" migrationDelegate="org.eclipse.jdt.internal.launching.JavaMigrationDelegate" ...