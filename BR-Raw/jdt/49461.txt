[preferences] code formatter not configured with Java project options

I will attach the offending file and the code formatter prefernces...the error is as follows; Error Jan 02, 2004 14:34:37.937 formatter failed to format (no edit returned). Will use unformatted text instead. kind: 8, string: // // Created on 02-Jan-2004 11:57:29 // Author NIKOLAY // Description // Project: Belot (http://belot.sourceforge.net) // package org.ninm.games.cardgames.ui.belot; import java.awt.GridLayout; import javax.swing.JLabel; import javax.swing.JPanel; import org.apache.commons.lang.ArrayUtils; import org.ninm.games.cardgames.Player; import org.ninm.games.cardgames.PlayerListener; import org.ninm.games.cardgames.PlayerPosition; import org.ninm.games.cardgames.common.Card; import org.ninm.games.cardgames.common.CardPlayedListener; import org.ninm.games.cardgames.server.CardGame; import org.ninm.games.cardgames.server.RemoteEngine; /** * @author NIKOLAY */ public class OtherPlayersPanel extends JPanel implements CardPlayedListener, PlayerListener { private final CardPanel m_myCardHolder = new CardPanel(); private final CardPanel m_partnerCardHolder = new CardPanel(); private final CardPanel m_leftCardHolder = new CardPanel(); private final CardPanel m_rightCardHolder = new CardPanel(); private final int m_myIndex; private final int m_partnerIndex; private final int m_leftIndex; private final int m_rightIndex; private final JLabel m_partnerLabel = new JLabel(); private final JLabel m_leftLabel = new JLabel(); private final JLabel m_rightLabel = new JLabel(); /** * @param game * @param engine */ public OtherPlayersPanel(final CardGame game, final RemoteEngine engine) { final Player[] players = game.getPlayers(); final Player myPlayer = engine.getMyPlayer(); m_myIndex = ArrayUtils.indexOf(players, myPlayer); m_partnerIndex = m_myIndex + 2 % 4; m_leftIndex = m_myIndex + 1 % 4; m_rightIndex = m_myIndex + 3 % 4; setLayout(new GridLayout(2, 5)); add(new JPanel()); m_partnerLabel.setText(players[m_partnerIndex].getName()); add(m_partnerLabel); add(m_partnerCardHolder); add(new JPanel()); add(new JPanel()); add(new JLabel(players[m_leftIndex].getName())); add(m_leftCardHolder); add(m_myCardHolder); add(m_rightCardHolder); add(new JLabel(players[m_rightIndex].getName())); engine.addCardPlayedListener(this); engine.addPlayerListener(this); } private CardPanel getCardPanel(final PlayerPosition position) { final int value = position.getValue(); assert value >= 0 && value <= 4; if(value == m_leftIndex) { return m_leftCardHolder; } else if(value == m_rightIndex) { return m_rightCardHolder; } else if(value == m_partnerIndex) { return m_partnerCardHolder; } else if(value == m_myIndex) { return m_myCardHolder; } else { return null; } } private JLabel getNameLabel(final PlayerPosition position) { final int value = position.getValue(); assert value >= 0 && value <= 4; if(value == m_leftIndex) { return m_leftLabel; } else if(value == m_rightIndex) { return m_rightLabel; } else if(value == m_partnerIndex) { return m_partnerLabel; } else { return null; } } /** * @{inheritDoc} */ public void cardPlayed(final PlayerPosition position, final Card card) { final CardPanel cardPanel = getCardPanel(position); cardPanel.setCard(new org.ninm.games.cardgames.ui.Card(card)); } /** * @{inheritDoc} */ public void playerJoined(final PlayerPosition position, final Player player) { getNameLabel(position).setText(player.getName()); } /** * @{inheritDoc} */ public void playerLeft(PlayerPosition position) { getNameLabel(position).setText("Empty"); } }