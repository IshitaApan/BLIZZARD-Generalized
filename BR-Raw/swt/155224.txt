NPE in CCombo.setVisible(false) if some of affected listeners has disposed it

<p> I get NPE when setting visibility of CCombo to false if this CCombo gets disposed by one of its listeners, that were called during visibility loss. </p> <p> Here is the exception itself: <br> <code> java.lang.NullPointerException 	at org.eclipse.swt.custom.CCombo.setVisible(CCombo.java:1362) 	at org.eclipse.swt.bugs.CComboSetVisibleNPE1$2.mouseUp(CComboSetVisibleNPE1.java:48) 	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:137) 	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:66) 	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:928) 	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3377) 	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2997) 	at org.eclipse.swt.bugs.CComboSetVisibleNPE1.main(CComboSetVisibleNPE1.java:68) </code> </p> <p> And here is the reason, the setVisible method of CCombo:<br> <code> public void setVisible (boolean visible) { 	super.setVisible(visible); 	if (!visible) popup.setVisible(false); // << NPE here if disposed } </code> </p> <p> A simple snippet:<br> <code> package org.eclipse.swt.bugs; import java.io.PrintWriter; import java.io.StringWriter; import org.eclipse.swt.SWT; import org.eclipse.swt.custom.CCombo; import org.eclipse.swt.events.FocusAdapter; import org.eclipse.swt.events.FocusEvent; import org.eclipse.swt.events.MouseAdapter; import org.eclipse.swt.events.MouseEvent; import org.eclipse.swt.layout.GridData; import org.eclipse.swt.layout.GridLayout; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Label; import org.eclipse.swt.widgets.Shell; /* * Bug Snippet: NPE in CCombo.setVisible(false) if some of affected listeners has disposed it */ public class CComboSetVisibleNPE1 { public static void main(String[] args) { Display display = new Display(); final Shell shell = new Shell(display); shell.setLayout(new GridLayout()); shell.setText("Demo for NPE in CCombo.setVisible(false)"); final CCombo combo = new CCombo(shell, SWT.NONE); combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL)); combo.setItems(new String[] {"First", "Second", "Third"}); combo.addFocusListener(new FocusAdapter() { public void focusLost(FocusEvent e) { combo.dispose(); } }); final Label label = new Label(shell, SWT.BORDER); label.setText("Click Here to Hide CCombo and get NPE!"); combo.setLayoutData(new GridData(GridData.FILL_BOTH)); label.addMouseListener(new MouseAdapter() { public void mouseUp(MouseEvent e) { if (!combo.isDisposed()) { combo.setFocus(); try { combo.setVisible(false); } catch (NullPointerException npe) { StringWriter stringWriter = new StringWriter(); PrintWriter printWriter = new PrintWriter(stringWriter); npe.printStackTrace(printWriter); printWriter.close(); label.setText(stringWriter.toString()); } shell.pack(); } } }); combo.select(0); combo.setFocus(); shell.pack(); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) { display.sleep(); } } display.dispose(); } } </code> </p> <p> As you can see, that it's all about the Label, which does not get any focus, so our combo does not get FocusLostEvent. If we use Button with SelectionListener instead, we should not get there. But that is not so easy! Due to <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=92230">Inconsistent Button focus events between platforms</a>, buttons do not get focus on selection on MacOSX at all! </p> <p> You might think that this case is too artificial, so I post another snippet below. It is much closer to the real life. You may have a look at it in case of discussing severity issues. <code> package org.eclipse.swt.bugs; import java.io.PrintWriter; import java.io.StringWriter; import org.eclipse.swt.SWT; import org.eclipse.swt.custom.CCombo; import org.eclipse.swt.custom.TableEditor; import org.eclipse.swt.events.FocusAdapter; import org.eclipse.swt.events.FocusEvent; import org.eclipse.swt.events.MouseAdapter; import org.eclipse.swt.events.MouseEvent; import org.eclipse.swt.events.SelectionAdapter; import org.eclipse.swt.events.SelectionEvent; import org.eclipse.swt.graphics.Image; import org.eclipse.swt.layout.FillLayout; import org.eclipse.swt.layout.GridData; import org.eclipse.swt.layout.GridLayout; import org.eclipse.swt.widgets.Button; import org.eclipse.swt.widgets.Control; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Group; import org.eclipse.swt.widgets.Label; import org.eclipse.swt.widgets.MessageBox; import org.eclipse.swt.widgets.Shell; import org.eclipse.swt.widgets.Table; import org.eclipse.swt.widgets.TableItem; /* * Bug Snippet: NPE in CCombo.setVisible(false) if FocusLostListener disposed it */ public class CComboSetVisibleNPE2 { public static void main(String[] args) { Display display = new Display(); Shell shell = new Shell(display); shell.setLayout(new FillLayout()); shell.setText("NPE in CCombo.setVisible(false)"); Group group = new Group(shell, SWT.NONE); group.setLayout(new GridLayout(2, false)); group.setText("Click the Info Icon to Add Custom Item"); final Table table = new Table(group, SWT.NONE); table.setLinesVisible(true); GridData layoutData = new GridData(GridData.FILL_BOTH); layoutData.minimumHeight = 200; table.setLayoutData(layoutData); TableItem item = new TableItem(table, SWT.NONE); item.setText("First Predefined Item"); final TableEditor editor = new TableEditor(table); editor.horizontalAlignment = SWT.LEFT; editor.grabHorizontal = true; Image infoImage = display.getSystemImage(SWT.ICON_INFORMATION); Control button; boolean isMac = "carbon".equals(SWT.getPlatform()); if (isMac) { Button control = new Button(group, SWT.PUSH); control.setImage(infoImage); control.addSelectionListener(new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { addComboEditableItem(table, editor); } }); button = control; } else { Label control = new Label(group, SWT.NONE); control.setImage(infoImage); control.addMouseListener(new MouseAdapter() { public void mouseDown(MouseEvent e) { addComboEditableItem(table, editor); } }); button = control; } button.setToolTipText("Click here to Add Custom Item!"); shell.pack(); shell.open(); while (!shell.isDisposed()) { if (!display.readAndDispatch()) { display.sleep(); } } display.dispose(); } private static void addComboEditableItem(final Table table, final TableEditor editor) { Control oldCombo = editor.getEditor(); if (oldCombo != null && !oldCombo.isDisposed()) { // in case we already have an active editor, with setVisible(false) we // want to force focusLost event to make CCombo save its text to an item try { oldCombo.setVisible(false); } catch (NullPointerException npe) { MessageBox message = new MessageBox(table.getShell(), SWT.ICON_QUESTION | SWT.YES | SWT.NO); message.setText("Do you want to catch this NPE?"); StringWriter stringWriter = new StringWriter(); PrintWriter printWriter = new PrintWriter(stringWriter); npe.printStackTrace(printWriter); printWriter.close(); message.setMessage(stringWriter.toString()); int result = message.open(); if (result == SWT.NO) { throw npe; } } oldCombo.dispose(); editor.setEditor(null, editor.getItem(), 0); } // XXX: we do not event get here if refused to catch NPE earlier (common way of coding) // and now we can create new item and activate an editor for it final TableItem addedItem = new TableItem(table, SWT.NONE, table.getItemCount()); final CCombo newCombo = new CCombo(table, SWT.NONE); newCombo.setItems(new String[] {"Combo Hint 1", "Combo Hint 2", "Combo Hint 3"}); newCombo.select(newCombo.getItemCount()/2); newCombo.addFocusListener(new FocusAdapter() { public void focusLost(FocusEvent fe) { String newValue = newCombo.getText(); addedItem.setText(newValue); newCombo.dispose(); } }); editor.setEditor(newCombo, addedItem, 0); newCombo.setFocus(); } } </code> </p>