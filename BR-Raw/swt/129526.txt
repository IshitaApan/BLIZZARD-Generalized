Proposal for new snippet : Non-rectangular Shell using transparent images

Following a request from Stefan Langer to add this to the SWT Snippets page http://www.eclipse.org/newsportal/article.php?id=27143&group=eclipse.platform.swt#27143 the following snippet (based on Snippet134) allows shells to be created in the form of a given transparent image. Given an image file, all pixels that are transparent are removed (using region.subtract) leaving a non-rectangular shell (or a shell of any form desired). This is useful, for example, for attractive splash-screens or fixed-sized non-rectangular application windows. import org.eclipse.swt.SWT; import org.eclipse.swt.events.KeyAdapter; import org.eclipse.swt.events.KeyEvent; import org.eclipse.swt.events.PaintEvent; import org.eclipse.swt.events.PaintListener; import org.eclipse.swt.graphics.Image; import org.eclipse.swt.graphics.ImageData; import org.eclipse.swt.graphics.Point; import org.eclipse.swt.graphics.Rectangle; import org.eclipse.swt.graphics.Region; import org.eclipse.swt.layout.FillLayout; import org.eclipse.swt.widgets.Canvas; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Event; import org.eclipse.swt.widgets.Listener; import org.eclipse.swt.widgets.Shell; /** * Class TransparentImageShell * Extension of Snippet134 allowing transparent images to be used in * the creation of non-rectangular shells. * * @version 1.0 - 25/08/2005 * @author S.Caunt - H.Ortiz * */ public class TransparentImageShell { public static void main(String[] args) { final Display display = new Display (); final Image image = new Image(display, "img/demo.png"); final Shell shell = new Shell (display, SWT.NO_TRIM); shell.setLayout (new FillLayout ()); Canvas canvas = new Canvas (shell, SWT.NONE); canvas.addPaintListener (new PaintListener () { public void paintControl (PaintEvent e) { e.gc.drawImage (image, 0, 0); } }); Region region = new Region(); region.add(image.getBounds()); ImageData imagedata = image.getImageData(); for (int y= 0; y < imagedata.height; y++) { for (int x= 0; x < imagedata.width; x++) { // Transparent pixel ? if (imagedata.getAlpha(x, y) < 255) { region.subtract(new Rectangle(x, y, 1, 1)); } } } // define the shape of the shell using setRegion shell.setRegion(region); // add ability to move shell around Listener l = new Listener() { Point origin; public void handleEvent(Event e) { switch (e.type) { case SWT.MouseDown : origin= new Point(e.x, e.y); break; case SWT.MouseUp : origin= null; break; case SWT.MouseMove : if (origin != null) { Point p= display.map(shell, null, e.x, e.y); shell.setLocation(p.x - origin.x, p.y - origin.y); } break; } } }; canvas.addListener(SWT.MouseDown, l); canvas.addListener(SWT.MouseUp, l); canvas.addListener(SWT.MouseMove, l); canvas.addKeyListener(new KeyAdapter() { public void keyPressed(KeyEvent event) { if (event.keyCode == SWT.ESC) { // hit escape shell.close(); } } }); shell.setSize(image.getBounds().width, image.getBounds().height); region.dispose(); shell.open (); while (!shell.isDisposed ()) { if (!display.readAndDispatch ()) display.sleep (); } image.dispose (); display.dispose (); } }