Exponential performance in DiskCache

Created attachment 137199 jprofiler call trees showing exponential performance in DiskCache When our datasets are sufficiently large, our reports never complete or take excessively long. It is not uncommon for our customers datasets to be large, and as such we expect several of our reports to be largely unusable by many customers. Because of this, the performance of the reports is considered a blocking issue by our organization. My colleague has entered this bug found in another area of BIRT along the same lines: https://bugs.eclipse.org/bugs/show_bug.cgi?id=277885 However, it appears that we have found another problem in a different area of BIRT. Please refer to the call trees in the attached ZIP file. These are exports from jprofiler comparing the same report with a slightly modified query. MemoryCache is a resultset of 1000 rows (500 in the first group, and 500 in the second group.) This apparently fits in the MemoryCache and no exponential performance is seen. DiskCache is a resultset of 95388 rows (47694 in the first group, and 47694 in the second group.) This resultset apparently does not fit in the MemoryCache, so the DiskCache is used instead. Please note that this report was stopped well before it could complete. My tests show that the number of invocations of org.eclipse.birt.data.engine.executor.cache.SmartRowResultSet.next equals the total number of rows from the resultset, n. Each of these n calls results in m calls to org.eclipse.birt.data.engine.executor.cache.disk.DiskCache.next, where m is the number of distinct rows in the group. The report was stopped at 654 invocations of the outer method for a total of 31 million calls to the inner method (654 * 47694 ~= 31 million) If you need to test the report, please replace the query with another table/columns with enough rows to reproduce. The query in the test reports is simply a mockup of data that resembles our real report...I know the query is very odd.