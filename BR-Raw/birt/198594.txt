XLS Emitter: Decimal value exported as String instead of Number

Created attachment 75175 Report with column of type Float Build ID: I20070625-1500 Steps To Reproduce: 1. Export attached report "numericData.rptdesign" to XLS format. Second column contains numeric values with decimal places. 2. "View Report as XLS", save file and open in editor. Expected result: All values in the second column are exported as numeric values (ss:Type="Number"). Actual result: Only integer values are exported as numeric values. Values with decimal places are exported with ss:Type="String". Segment from output: ... <Row> 	<Cell ss:Index="2" ss:StyleID="0" ss:MergeAcross="0" ss:MergeDown="0"> 		<Data ss:Type="String">Denmark</Data> 	</Cell> 	<Cell ss:Index="3" ss:StyleID="0" ss:MergeAcross="0" ss:MergeDown="0"> 		<Data ss:Type="Number">102100</Data> 	</Cell> </Row> <Row> 	<Cell ss:Index="2" ss:StyleID="0" ss:MergeAcross="0" ss:MergeDown="0"> 		<Data ss:Type="String">Finland</Data> 	</Cell> 	<Cell ss:Index="3" ss:StyleID="0" ss:MergeAcross="0" ss:MergeDown="0"> 		<Data ss:Type="String">95266.667</Data> 	</Cell> </Row> ... Proposed solution: ExcelEmitter: public void startData( IDataContent data ) {		 super.startData( data ); HyperlinkDef url = parseHyperLink( data ); // use getValue instead of getText engine.addData( data.getValue().toString( ), data.getComputedStyle( ), url ); } ExcelWriter: public void writeText( String txt ) { writer.openTag( "Data" ); try { // new BigDecimal() instead of Integer.parse() new BigDecimal ( txt ); writer.attribute( "ss:Type", "Number" ); } catch ( Exception e ) { writer.attribute( "ss:Type", "String" ); } writer.text( txt ); writer.closeTag( "Data" ); } Drawback of this solution: getText() did return the formatted number, getValue().toString() does not format the number. This would be no problem if Excel emitter would be able to export number format from BIRT styles too (separate bug report will follow ;-) ).