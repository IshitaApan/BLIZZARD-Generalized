JVM crashes when using joint datasets and the sun.jdbc.odbc.JdbcOdbcDriver in Report Designer

Created attachment 94098 The rptdesign to reproduce the problem Build ID: 2.3.0.v20080227-0800 Steps To Reproduce: I am using the Report Designer and the sun.jdbc.odbc.JdbcOdbcDriver to access various Odbc sources on a windows computer for a report design. I'm using joint datasets to join data from various sources. Attached is a simple rtpdesign file which fills some dataset using the datasource excel11 which accesses an ODBC data source on the computer named "ODBCSOURCE". On my system this odbc source is an excel file containing one sheet "Tabelle1" with two columns with headers "spalte1" and "spalte2". However this will work with any other odbc datasource. Attached is also the excel file I used for testing. (To use it, register it as ODBC data source name ODBCSOURCE in the odbc administration on windows / don't know how to perform this on Linux/Mac) Now what happens is that I get crashes of the JVM if I open the joint dataset "61_plus_62" in the data explorer and perform some operations in there, e.g. switching to the preview, changing the query, ... This is not really 100% reproducible but it happens again and again. More information: Now my conjecture and what I think is the solution: I observed that the very first jdbc connection opened during this operation is closed via the "finalizer" thread and not from the "main" thread. Since I have read somewhere that the sun jdbc driver is not entirely thread safe, this might be the root cause of the problem. For people using other (better?) jdbc drivers that might never become an issue however if acquiring a system resource it should be closed properly and not by the garbage collection. I noticed that in "org.eclipse.birt.report.designer.ui.util.DataSetProvider" (1.21) in function "public DataSetViewData[] getCachedDataSetItemModel( DataSetHandle ds )" a DataRequestSession is created, but the session is never shutdown(). I suggest adding a session.shutdown() before the return. Since the session reference is stored locally only I'm quite sure, this is the cause. I tried this and so far this seems to work for me.